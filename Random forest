**Importacion de modelos**
import numpy as np
import pandas as pd

import sklearn
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn import metrics

import matplotlib.pyplot as plt
from matplotlib import style
import matplotlib.ticker as ticker
import seaborn as sns

**Importacion de datos**
data=pd.read_csv("DATOS.csv")
data
data.info()

**Preprocesamiento**
data=data.replace("na",np.nan)
data=data.dropna(axis=0)

data['O3']=pd.to_numeric(data['O3'],errors="coerce")
data['Viento_vel']=pd.to_numeric(data['Viento_vel'],errors="coerce")
data['Viento_dir']=pd.to_numeric(data['Viento_dir'],errors="coerce")
data['Tem']=pd.to_numeric(data['Tem'],errors="coerce")
data['Hr']=pd.to_numeric(data['Hr'],errors="coerce")
data=data.drop(["Fecha",],axis=1)

**Random forest**
X_train, X_test, y_train, y_test = train_test_split(
                                        data.drop('O3', axis = 'columns'),
                                        data['O3'],
                                        train_size   = 0.8,
                                        random_state = 42,
                                        shuffle      = True
                                    )
modelo1 = RandomForestRegressor(
            n_estimators = 146,
            criterion    = 'squared_error',
            max_depth    = None,
            max_features = 2,
            oob_score    = False,
            n_jobs       = -1,
            random_state = 132
         )


modelo1.fit(X_train, y_train)
score = modelo1.score(X_test, y_test)
print(f'R^2 score: {score}')

**Visualizacion de resultados**
y_pred1=modelo1.predict(X_test)
y_pred1
y_test_list=list(y_test)
plt.plot(y_test_list, color='red', label = 'VALOR ACTUAL')
plt.plot(y_pred1, color='blue', label='VALOR PREDICHO')
plt.title('CONCENTRACION ACTUAL vs CONCENTRACION PREDICHA')
plt.xlabel('ID')
plt.ylabel('OZONO ppm')
plt.legend()
plt.show()
error_score = metrics.r2_score(y_test, y_pred1)
print("R squared error : ", error_score)
